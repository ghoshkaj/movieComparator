/**
 * Created by kajarighosh on 7/28/15.
 */
angular.module('movieComparatorApp.directives', ['movieComparatorApp.d3'])
  .directive('2dMultiVerticalBar', function() {
    return {
      restrict: 'A',
      template: '<svg></svg>',
      //template: '<div width=350px height=350px></div>',
      link: function (scope, elem, attr) {


        var nv_data =
          [{
            'key': '1/4 Mile Radius',
            'values': [{
              'key': 'Owner',
              'values': [{'x': '2000', 'y': 10000}, {'x': '2010', 'y': 70000}, {'x': '2020', 'y': 45445}]
            }, {
              'key': 'Renter',
              'values': [{'x': '2000', 'y': 20500}, {'x': '2010', 'y': 85000}, {'x': '2020', 'y': 23895}]
            }, {
              'key': 'Vacant',
              'values': [{'x': '2000', 'y': 15300}, {'x': '2010', 'y': 60000}, {'x': '2020', 'y': 24905}]
            }]
          },
            {
              'key': '1/2 Mile Radius',
              'values': [{
                'key': 'Owner',
                'values': [{'x': '2000', 'y': 38936}, {'x': '2010', 'y': 20739}, {'x': '2020', 'y': 38432}]
              }, {
                'key': 'Renter',
                'values': [{'x': '2000', 'y': 34453}, {'x': '2010', 'y': 12473}, {'x': '2020', 'y': 34582}]
              }, {
                'key': 'Vacant',
                'values': [{'x': '2000', 'y': 39089}, {'x': '2010', 'y': 28495}, {'x': '2020', 'y': 54899}]
              }]
            },
            {
              'key': '1 Mile Radius',
              'values': [{
                'key': 'Owner',
                'values': [{'x': '2000', 'y': 0.3}, {'x': '2010', 'y': 0.2}, {'x': '2020', 'y': 0.1}]
              }, {
                'key': 'Renter',
                'values': [{'x': '2000', 'y': 0.1}, {'x': '2010', 'y': 0.40}, {'x': '2020', 'y': 0.40}]
              }, {
                'key': 'Vacant',
                'values': [{'x': '2000', 'y': 0.3}, {'x': '2010', 'y': 0.2}, {'x': '2020', 'y': 0.1}]
              }]
            },
            {
              'key': '3 Mile Radius',
              'values': [{
                'key': 'Owner',
                'values': [{'x': '2000', 'y': 0.3}, {'x': '2010', 'y': 0.2}, {'x': '2020', 'y': 0.1}]
              }, {
                'key': 'Renter',
                'values': [{'x': '2000', 'y': 0.1}, {'x': '2010', 'y': 0.40}, {'x': '2020', 'y': 0.40}]
              }, {
                'key': 'Vacant',
                'values': [{'x': '2000', 'y': 0.3}, {'x': '2010', 'y': 0.2}, {'x': '2020', 'y': 0.1}]
              }]
            }];


        function verticalBars(data, rawSvg) {

          var fullData = data;

          var chart;

          var dataLegend = nv.models.legend()

            .key(function (d) {
              return d.key;
            })
            .updateState(true)
            .radioButtonMode(true)
            .color(['#444', '#444', '#444'])
            .width(300);


          var wrap = d3.select(rawSvg).selectAll('g.nv-legend').data([fullData]);
          var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend');

          wrap
            .transition().duration(500)
            .call(dataLegend);

          var series = wrap.selectAll('g.nv-series');
          dataLegend.dispatch.on('stateChange', function (e) {
            changeDataSeries(e)
          });

          function tooltip(key, title) {
            var tooltipString = '<table >' +
                //'<tr>'+'<th colspan="3">'+title+'</th>'+'</tr>'+
              '<tr>' + '<td>' + key.data.key + '</td>' +
              '<td class="legend-color-guide"><div style="background-color:' + key.color + ';"></div></td>' + '</tr>' +
              '<tr>' + '<td> Year: </td> <td>' + key.data.x + '</td>' + '</tr>' +
              '<tr>' + '<td> Population: </td> <td>' + key.data.y + '</td>' + '</tr>' + '</table>';
            // + '<tr>'+'<td colspan="3"> Households 1,2345</td>'+'</tr>'+'</table>';
            return tooltipString
          }


           var year1 = fullData[0].values[0].values[0].y + fullData[0].values[1].values[0].y + fullData[0].values[2].values[0].y;
           var year2 = fullData[0].values[1].values[0].y + fullData[0].values[1].values[0].y + fullData[0].values[1].values[0].y;
           var year3 = fullData[0].values[2].values[0].y + fullData[0].values[2].values[0].y + fullData[0].values[2].values[0].y;
           //var totalThree = fullData[0].values[3].values[0].y + fullData[0].values[3].values[1].y + fullData[0].values[3].values[2].y;
          console.log(fullData[0].values[2].values[0].x);
          console.log(year1);
          console.log(year2);
          console.log(year3);
          console.log(fullData[0]);

          var max = 300000;

          nv.addGraph({
            generate: function () {

              chart = nv.models.multiBarChart()
                  //.stacked(true)
                  .showControls(false)
                  //.showControls(true)
                  .showLegend(true)
                  //.forceY([0,max])
                ;

              chart.yAxis
                .tickFormat(d3.format('s'))
                .axisLabel("Housing Units");

              //chart.yAxis.domain(function(d){return });



              chart.xAxis
                .axisLabel("Years");

              chart.tooltip.enabled(true);
              chart.tooltip.contentGenerator(function (key) {
                return tooltip(key, "Occupied Unit");
              });

              chart.legend.margin({top: 50, left:-20, bottom: 50});
              chart.legend.radioButtonMode(false);
              chart.legend.width(200);
              //chart.legend.rightAlign(options.legendAlignRight);

              chart.reduceXTicks(false);

              chart.dispatch.on('renderEnd', function () {
                console.log('Vertical Bar Chart Render Complete');
              });
              //      var svg = d3.select(rawSvg).datum(data) .style({ 'width': 350, 'height': 400 });
              //      svg.transition().duration(0).call(chart);
              //      return chart;
              //    }
              //  })
              //};

              d3.select(rawSvg)
                .style({'width': 350, 'height': 400})
                .datum(fullData[0].values)
                //.datum(data)
                .transition().duration(1200)
                .call(chart.forceY([0,max]));

              return chart;
            }
          });

          function redraw() {
            max = 600000;
            d3.select(rawSvg)
              .style({'width': 350, 'height': 400})
              .datum(data)
              //.datum(data)
              .transition().duration(1200)
              .call(chart.forceY([0, max]));
          }


          function changeDataSeries(e) {
            var series = e.disabled;
            console.log(series);
            var dataIndex = 0;
            for (var i = 0; i < series.length; i++) {
              if (series[i] === false) dataIndex = i;
            }

            console.log(dataIndex);

            data = fullData[dataIndex].values;

            console.log(data);

            max = 400000;
            redraw();
          }

        }

        var rawSvg = elem.find('svg')[0];
        verticalBars(nv_data, rawSvg);
      }
    }
  })
 .directive('2dMultiBar', function() {
    return {
      restrict: 'A',
      template: '<svg></svg>',
      //template: '<div width=350px height=350px></div>',
      link: function (scope, elem, attr) {


        var nv_data=
          [{
            'key': "1/4 Mile Radius",
            'values':[{
              'key': 'Male',
              'values': [{'label': '1 to 4 years', 'value': -0.3}, {'label': '5 to 9 years', 'value': -0.4}, {'label': '10 to 14 years', 'value': -0.5}, {'label': '15 to 19 years', 'value': -0.9},{'label': '20 to 24 years', 'value': -0.84},{'label': '25 to 29 years', 'value': -0.73},{'label': '30 to 34 years', 'value': -0.63},{'label': '35 to 39 years', 'value': -0.53},{'label': '40 to 44 years', 'value': -0.53},{'label': '45 to 49 years', 'value': -0.73},{'label': '50 to 54 years', 'value': -0.73},{'label': '55 to 59 years', 'value': -0.93}]
            }, {
              'key': 'Female',
              'values': [{'label': '1 to 4 years', 'value': 0.35}, {'label': '5 to 9 years', 'value': 0.60}, {'label': '10 to 14 years', 'value': 0.70}, {'label': '15 to 19 years', 'value': 0.6},{'label': '20 to 24 years', 'value': 0.84},{'label': '25 to 29 years', 'value': 0.53},{'label': '30 to 34 years', 'value': 0.93},{'label': '35 to 39 years', 'value': 0.83},{'label': '40 to 44 years', 'value': 0.73},{'label': '45 to 49 years', 'value': 0.63},{'label': '50 to 54 years', 'value': 0.53},{'label': '55 to 59 years', 'value': 0.53}]
            }]
          },
            {'key': "1/2 Mile Radius",
              'values': [{
                'key': 'Male',
                'values': [{'label': '1 to 4 years', 'value': -0.3}, {'label': '5 to 9 years', 'value': -0.2}, {'label': '10 to 14 years', 'value': -0.1}, {'label': '15 to 19 years', 'value': -0.3},{'label': '20 to 24 years', 'value': -0.84},{'label': '25 to 29 years', 'value': -0.23},{'label': '30 to 34 years', 'value': -0.45},{'label': '35 to 39 years', 'value': -0.23},{'label': '40 to 44 years', 'value': -0.43},{'label': '45 to 49 years', 'value': -0.93},{'label': '50 to 54 years', 'value': -0.63},{'label': '55 to 59 years', 'value': -0.73}]
              }, {
                'key': 'Female',
                'values': [{'label': '1 to 4 years', 'value': 0.1}, {'label': '5 to 9 years', 'value': 0.40}, {'label': '10 to 14 years', 'value': 0.30}, {'label': '15 to 19 years', 'value': 0.5},{'label': '20 to 24 years', 'value': 0.84},{'label': '25 to 29 years', 'value': 0.53},{'label': '30 to 34 years', 'value': 0.43},{'label': '35 to 39 years', 'value': 0.53},{'label': '40 to 44 years', 'value': 0.93},{'label': '45 to 49 years', 'value': 0.83},{'label': '50 to 54 years', 'value': 0.83},{'label': '55 to 59 years', 'value': 0.73}]
              }]
            },
            {'key': "1 Mile Radius",
              'values': [{
                'key': 'Male',
                'values': [{'label': '1 to 4 years', 'value': -0.3}, {'label': '5 to 9 years', 'value': -0.2}, {'label': '10 to 14 years', 'value': -0.1}, {'label': '15 to 19 years', 'value': -0.3},{'label': '20 to 24 years', 'value': -0.84},{'label': '25 to 29 years', 'value': -0.23},{'label': '30 to 34 years', 'value': -0.23},{'label': '35 to 39 years', 'value': -0.43},{'label': '40 to 44 years', 'value': -0.9},{'label': '45 to 49 years', 'value': -0.43},{'label': '50 to 54 years', 'value': -0.63},{'label': '55 to 59 years', 'value': -0.53}]
              }, {
                'key': 'Female',
                'values': [{'label': '1 to 4 years', 'value': 0.1}, {'label': '5 to 9 years', 'value': 0.20}, {'label': '10 to 14 years', 'value': 0.20}, {'label': '15 to 19 years', 'value': 0.7},{'label': '20 to 24 years', 'value': 0.84},{'label': '25 to 29 years', 'value': 0.53},{'label': '30 to 34 years', 'value': 0.63},{'label': '35 to 39 years', 'value': 0.45},{'label': '40 to 44 years', 'value': 0.63},{'label': '45 to 49 years', 'value': 0.83},{'label': '50 to 54 years', 'value': 0.93},{'label': '55 to 59 years', 'value': 0.93}]
              }]
            },
            {
              'key':"3 Mile Radius",
              'values':[{
                'key': 'Male',
                'values': [
                  {'label': '85+', 'value': -133},
                  {'label': '80 - 84', 'value': -121},
                  {'label': '75 - 79', 'value': -185},
                  {'label': '70 - 74', 'value': -315},
                  {'label': '65 - 69', 'value': -466},
                  {'label': '60 - 64', 'value': -614},
                  {'label': '55 - 59', 'value': -714},
                  {'label': '50 - 54', 'value': -799},
                  {'label': '45 - 49', 'value': -814},
                  {'label': '40 - 44', 'value': -861},
                  {'label': '35 - 39', 'value': -848},
                  {'label': '30 - 34', 'value': -1015},
                  {'label': '25 - 29', 'value': -824},
                  {'label': '20 - 24', 'value': -580},
                  {'label': '15 - 19', 'value': -575},
                  {'label': '10 - 14', 'value': -775},
                  {'label': '5 - 9', 'value': -844},
                  {'label': '0 - 4', 'value': -821}
                ]
              }, {
                'key': 'Female',
                'values': [{'label': '85+', 'value': 280},
                  {'label': '80 - 84', 'value': 177},
                  {'label': '75 - 79', 'value': 247},
                  {'label': '70 - 74', 'value': 359},
                  {'label': '65 - 69', 'value': 491},
                  {'label': '60 - 64', 'value': 631},
                  {'label': '55 - 59', 'value': 730},
                  {'label': '50 - 54', 'value': 696},
                  {'label': '45 - 49', 'value': 783},
                  {'label': '40 - 44', 'value': 816},
                  {'label': '35 - 39', 'value': 757},
                  {'label': '30 - 34', 'value': 864},
                  {'label': '25 - 29', 'value': 747},
                  {'label': '20 - 24', 'value': 468},
                  {'label': '15 - 19', 'value': 456},
                  {'label': '10 - 14', 'value': 695},
                  {'label': '5 - 9', 'value': 758},
                  {'label': '0 - 4', 'value': 741}
                  ]
              }]
            }
            //{
            //  'key':"3 Mile Radius",
            //  'values':[{
            //    'key': 'Male',
            //    'values': [{'label': '1 to 4 years', 'value': -0.3}, {'label': '5 to 9 years', 'value': -0.2}, {'label': '10 to 14 years', 'value': -0.1}, {'label': '15 to 19 years', 'value': -0.3},{'label': '20 to 24 years', 'value': -0.84},{'label': '25 to 29 years', 'value': -0.23},{'label': '30 to 34 years', 'value': -0.23},{'label': '35 to 39 years', 'value': -0.53},{'label': '40 to 44 years', 'value': -0.53},{'label': '45 to 49 years', 'value': -0.53},{'label': '50 to 54 years', 'value': -0.53},{'label': '55 to 59 years', 'value': -0.53}]
            //  }, {
            //    'key': 'Female',
            //    'values': [{'label': '1 to 4 years', 'value': 0.1}, {'label': '5 to 9 years', 'value': 0.30}, {'label': '10 to 14 years', 'value': 0.40}, {'label': '15 to 19 years', 'value': 0.3},{'label': '20 to 24 years', 'value': 0.84},{'label': '25 to 29 years', 'value': 0.53},{'label': '30 to 34 years', 'value': 0.43},{'label': '35 to 39 years', 'value': 0.73},{'label': '40 to 44 years', 'value': 0.83},{'label': '45 to 49 years', 'value': 0.73},{'label': '50 to 54 years', 'value': 0.73},{'label': '55 to 59 years', 'value': 0.63}]
            //  }]
            //}
          ]
          ;

        function horizontalBars(data,rawSvg){
//console.log(data);
//console.log(data[0]);
          var fullData = data;
          //
          var chart;
          //
          var dataLegend = nv.models.legend()

            .key(function(d) { return d.key; })
            .updateState(true)
            .radioButtonMode(true)
            //.color(['#444', '#444', '#444'])
            .width(300);



          var wrap = d3.select(rawSvg).data([fullData]).transition().duration(500).call(dataLegend);
          var series = wrap.selectAll('g.nv-series').style('cursor','hand');
          var circles = wrap.selectAll('g.nv-series circle');


          d3.select(circles[0][0]).style('fill-opacity','1');
          d3.select(circles[0][1]).style('fill-opacity','0');
          d3.select(circles[0][2]).style('fill-opacity','0');
          d3.select(circles[0][3]).style('fill-opacity','0');


          //var oneCircle = series[0][0].childNodes[0];
          //var seriesCircles = wrap.selectAll('g.nv-legend-symbol');

          //console.log(series[0][0].childNodes[0]);
          //console.log(oneCircle);


          //var wrap = d3.select(rawSvg).selectAll('g.nv-legend').data([fullData]);
          //var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend-radius');
          //
          //wrap.on("click", function(d) {
          //  console.log("this works");
          //  var selectedCircle = d3.select(this);
          //  console.log(selectedCircle);
          //  console.log(wrap);
          //  circle.style('fill-opacity','0');// presumes that <rect> has an id!
          //  //d.attr('nv-legend-symbol').style('fill-opacity','0');// presumes that <rect> has an id!
          //});
          //
          //wrap
          //  .transition().duration(500)
          //  .call(dataLegend);

          //var series = wrap.selectAll('g.nv-series');
          dataLegend.dispatch.on('stateChange', function (e) {changeDataSeries(e)});

          function tooltip (key, title){
            var tooltipString = '<table >'+'<tr>'+'<th colspan="3">'+title+'</th>'+'</tr>'+
              '<tr>'+'<td>'+key.data.key +'</td>'+'</tr>'+
              '<tr>'+'<td class="legend-color-guide"><div style="background-color:'+key.color+';"></div>'+
              '<td>'+ key.data.label+'</td>'+'<td>'+key.data.value+'</td>'+'</tr>'+'</table>';
            // + '<tr>'+'<td colspan="3"> Households 1,2345</td>'+'</tr>'+'</table>';
            return tooltipString}

          nv.addGraph(function() {

            chart = nv.models.multiBarHorizontalChart()
                .x(function(d) { return d.label })
                .y(function(d) { return d.value })
                .width(350)
                .height(350)
                .margin({top: -30, right: 20, bottom: 0, left: 100})
                .showControls(false)
                .showValues(true)
                .showLegend(true)
                .stacked(true)
              //.color(["#FF0000","#00FF00","#0000FF"])

              ;
            var negativeFormatter = d3.format("0");
            //var formatNum = d3.format('.0%');
            var formatNum = d3.format();

            chart.yAxis.tickFormat(function (d) {
              if (d < 0) d = -d; // No nagative labels
              return formatNum(d);
            });
            chart.xAxis.axisLabel("Age (Years)")
              .axisLabelDistance(20);

            chart.valueFormat(function (d) {
              if (d < 0) d = -d; // No nagative labels
              return formatNum(d);
            });

            chart.legend.margin({top: 30, left:-20, bottom: 50});
            chart.legend.updateState(false);
            //chart.legend.radioButtonMode(true);

            chart.tooltip.enabled(true);
            chart.tooltip.contentGenerator(function(key){
              return tooltip(key, "This Title");
            });


          d3.select(rawSvg)
            .style({ 'width': 350, 'height': 350 })
            .datum(fullData[3].values)
            //.datum(data)
            .transition().duration(1200)
            .call(chart);

          return chart;
        });

        function redraw(){
          d3.select(rawSvg)
            .style({ 'width': 350, 'height': 350 })
            .datum(data)
            //.datum(data)
            .transition().duration(1200)
            .call(chart);
        }


        function changeDataSeries(e) {
          var series = e.disabled;
          console.log(series);
          var dataIndex = 0;
          for(var i = 0; i < series.length; i++){
            if(series[i] === true) d3.select(circles[0][i]).style('fill-opacity','0');
            else {
              dataIndex = i;
              d3.select(circles[0][i]).style('fill-opacity','1');
            }
          }
          //
          //d3.select(circles[0][0]).style('fill-opacity','0');
          //d3.select(circles[0][1]).style('fill-opacity','1');
          //d3.select(circles[0][2]).style('fill-opacity','0');
          //d3.select(circles[0][3]).style('fill-opacity','0');

          console.log(dataIndex);

          data = fullData[dataIndex].values;

          console.log(data);

          redraw();
        }

      }

        var rawSvg = elem.find('svg')[0];
        horizontalBars(nv_data, rawSvg);

      }
    }
  }
)
  .directive('stackedArea', function() {
    return {
      restrict: 'A',
      template: '<svg width=350px height=350px></svg>',
      //template: '<div width=350px height=350px></div>',
      link: function (scope, elem, attr) {

        var margin = {top: 150, right: 50, bottom: 50, left: 50},
          width = 350 - margin.left - margin.right,
          height = 350 - margin.top - margin.bottom;

        var rawSvg = elem.find('svg')[0];

        //var svg = d3.select(rawSvg).append('svg')
        //  .attr('width', width + margin.left + margin.right)
        //  .attr('height', height + margin.top + margin.bottom);


        var histcatexplong = [
          {
            'key' : 'Consumer Discretionary' ,
            'values' : [ [ 1138683600000 , 27.38478809681] , [ 1141102800000 , 27.371377218208] , [ 1143781200000 , 26.309915460827] , [ 1146369600000 , 26.425199957521] , [ 1149048000000 , 26.823411519395] , [ 1151640000000 , 23.850443591584] , [ 1154318400000 , 23.158355444054] , [ 1156996800000 , 22.998689393694] , [ 1159588800000 , 27.977128511299] , [ 1162270800000 , 29.073672469721] , [ 1164862800000 , 28.587640408904] , [ 1167541200000 , 22.788453687638] , [ 1170219600000 , 22.429199073597] , [ 1172638800000 , 22.324103271051] , [ 1175313600000 , 17.558388444186] , [ 1177905600000 , 16.769518096208] , [ 1180584000000 , 16.214738201302] , [ 1183176000000 , 18.729632971228] , [ 1185854400000 , 18.814523318848] , [ 1188532800000 , 19.789986451358] , [ 1191124800000 , 17.070049054933] , [ 1193803200000 , 16.121349575715] , [ 1196398800000 , 15.141659430091] , [ 1199077200000 , 17.175388025298] , [ 1201755600000 , 17.286592443521] , [ 1204261200000 , 16.323141626569] , [ 1206936000000 , 19.231263773952] , [ 1209528000000 , 18.446256391094] , [ 1212206400000 , 17.822632399764] , [ 1214798400000 , 15.539366475979] , [ 1217476800000 , 15.255131790216] , [ 1220155200000 , 15.660963922593] , [ 1222747200000 , 13.254482273697] , [ 1225425600000 , 11.920796202299] , [ 1228021200000 , 12.122809090925] , [ 1230699600000 , 15.691026271393] , [ 1233378000000 , 14.720881635107] , [ 1235797200000 , 15.387939360044] , [ 1238472000000 , 13.765436672229] , [ 1241064000000 , 14.6314458648] , [ 1243742400000 , 14.292446536221] , [ 1246334400000 , 16.170071367016] , [ 1249012800000 , 15.948135554337] , [ 1251691200000 , 16.612872685134] , [ 1254283200000 , 18.778338719091] , [ 1256961600000 , 16.75602606542] , [ 1259557200000 , 19.385804443147] , [ 1262235600000 , 22.950590240168] , [ 1264914000000 , 23.61159018141] , [ 1267333200000 , 25.708586989581] , [ 1270008000000 , 26.883915999885] , [ 1272600000000 , 25.893486687065] , [ 1275278400000 , 24.678914263176] , [ 1277870400000 , 25.937275793023] , [ 1280548800000 , 29.46138169384] , [ 1283227200000 , 27.357322961862] , [ 1285819200000 , 29.057235285673] , [ 1288497600000 , 28.549434189386] , [ 1291093200000 , 28.506352379723] , [ 1293771600000 , 29.449241421597] , [ 1296450000000 , 25.796838168807] , [ 1298869200000 , 28.740145449189] , [ 1301544000000 , 22.091744141872] , [ 1304136000000 , 25.079662545409] , [ 1306814400000 , 23.674906973064] , [ 1309406400000 , 23.41800274293] , [ 1312084800000 , 23.243644138871] , [ 1314763200000 , 31.591854066817] , [ 1317355200000 , 31.497112374114] , [ 1320033600000 , 26.672380820431] , [ 1322629200000 , 27.297080015495] , [ 1325307600000 , 20.174315530051] , [ 1327986000000 , 19.631084213899] , [ 1330491600000 , 20.366462219462] , [ 1333166400000 , 17.429019937289] , [ 1335758400000 , 16.75543633539] , [ 1338436800000 , 16.182906906042]]
          } ,
          {
            'key' : 'Consumer Staples' ,
            'values' : [ [ 1138683600000 , 7.2800122043237] , [ 1141102800000 , 7.1187787503354] , [ 1143781200000 , 8.351887016482] , [ 1146369600000 , 8.4156698763993] , [ 1149048000000 , 8.1673298604231] , [ 1151640000000 , 5.5132447126042] , [ 1154318400000 , 6.1152537710599] , [ 1156996800000 , 6.076765091942] , [ 1159588800000 , 4.6304473798646] , [ 1162270800000 , 4.6301068469402] , [ 1164862800000 , 4.3466656309389] , [ 1167541200000 , 6.830104897003] , [ 1170219600000 , 7.241633040029] , [ 1172638800000 , 7.1432372054153] , [ 1175313600000 , 10.608942063374] , [ 1177905600000 , 10.914964549494] , [ 1180584000000 , 10.933223880565] , [ 1183176000000 , 8.3457524851265] , [ 1185854400000 , 8.1078413081882] , [ 1188532800000 , 8.2697185922474] , [ 1191124800000 , 8.4742436475968] , [ 1193803200000 , 8.4994601179319] , [ 1196398800000 , 8.7387319683243] , [ 1199077200000 , 6.8829183612895] , [ 1201755600000 , 6.984133637885] , [ 1204261200000 , 7.0860136043287] , [ 1206936000000 , 4.3961787956053] , [ 1209528000000 , 3.8699674365231] , [ 1212206400000 , 3.6928925238305] , [ 1214798400000 , 6.7571718894253] , [ 1217476800000 , 6.4367313362344] , [ 1220155200000 , 6.4048441521454] , [ 1222747200000 , 5.4643833239669] , [ 1225425600000 , 5.3150786833374] , [ 1228021200000 , 5.3011272612576] , [ 1230699600000 , 4.1203601430809] , [ 1233378000000 , 4.0881783200525] , [ 1235797200000 , 4.1928665957189] , [ 1238472000000 , 7.0249415663205] , [ 1241064000000 , 7.006530880769] , [ 1243742400000 , 6.994835633224] , [ 1246334400000 , 6.1220222336254] , [ 1249012800000 , 6.1177436137653] , [ 1251691200000 , 6.1413396231981] , [ 1254283200000 , 4.8046006145874] , [ 1256961600000 , 4.6647600660544] , [ 1259557200000 , 4.544865006255] , [ 1262235600000 , 6.0488249316539] , [ 1264914000000 , 6.3188669540206] , [ 1267333200000 , 6.5873958262306] , [ 1270008000000 , 6.2281189839578] , [ 1272600000000 , 5.8948915746059] , [ 1275278400000 , 5.5967320482214] , [ 1277870400000 , 0.99784432084837] , [ 1280548800000 , 1.0950794175359] , [ 1283227200000 , 0.94479734407491] , [ 1285819200000 , 1.222093988688] , [ 1288497600000 , 1.335093106856] , [ 1291093200000 , 1.3302565104985] , [ 1293771600000 , 1.340824670897] , [ 1296450000000 , 0] , [ 1298869200000 , 0] , [ 1301544000000 , 0] , [ 1304136000000 , 0] , [ 1306814400000 , 0] , [ 1309406400000 , 0] , [ 1312084800000 , 0] , [ 1314763200000 , 0] , [ 1317355200000 , 4.4583692315] , [ 1320033600000 , 3.6493043348059] , [ 1322629200000 , 3.8610064091761] , [ 1325307600000 , 5.5144800685202] , [ 1327986000000 , 5.1750695220792] , [ 1330491600000 , 5.6710066952691] , [ 1333166400000 , 8.5658461590953] , [ 1335758400000 , 8.6135447714243] , [ 1338436800000 , 8.0231460925212]]
          } ,
          {
            'key' : 'Energy' ,
            'values' : [ [ 1138683600000 , 1.544303464167] , [ 1141102800000 , 1.4387289432421] , [ 1143781200000 , 0] , [ 1146369600000 , 0] , [ 1149048000000 , 0] , [ 1151640000000 , 1.328626801128] , [ 1154318400000 , 1.2874050802627] , [ 1156996800000 , 1.0872743105593] , [ 1159588800000 , 0.96042562635813] , [ 1162270800000 , 0.93139372870616] , [ 1164862800000 , 0.94432167305385] , [ 1167541200000 , 1.277750166208] , [ 1170219600000 , 1.2204893886811] , [ 1172638800000 , 1.207489123122] , [ 1175313600000 , 1.2490651414113] , [ 1177905600000 , 1.2593129913052] , [ 1180584000000 , 1.373329808388] , [ 1183176000000 , 0] , [ 1185854400000 , 0] , [ 1188532800000 , 0] , [ 1191124800000 , 0] , [ 1193803200000 , 0] , [ 1196398800000 , 0] , [ 1199077200000 , 0] , [ 1201755600000 , 0] , [ 1204261200000 , 0] , [ 1206936000000 , 0] , [ 1209528000000 , 0] , [ 1212206400000 , 0] , [ 1214798400000 , 0] , [ 1217476800000 , 0] , [ 1220155200000 , 0] , [ 1222747200000 , 1.4516108933695] , [ 1225425600000 , 1.1856025268225] , [ 1228021200000 , 1.3430470355439] , [ 1230699600000 , 2.2752595354509] , [ 1233378000000 , 2.4031560010523] , [ 1235797200000 , 2.0822430731926] , [ 1238472000000 , 1.5640902826938] , [ 1241064000000 , 1.5812873972356] , [ 1243742400000 , 1.9462448548894] , [ 1246334400000 , 2.9464870223957] , [ 1249012800000 , 3.0744699383222] , [ 1251691200000 , 2.9422304628446] , [ 1254283200000 , 2.7503075599999] , [ 1256961600000 , 2.6506701800427] , [ 1259557200000 , 2.8005425319977] , [ 1262235600000 , 2.6816184971185] , [ 1264914000000 , 2.681206271327] , [ 1267333200000 , 2.8195488011259] , [ 1270008000000 , 0] , [ 1272600000000 , 0] , [ 1275278400000 , 0] , [ 1277870400000 , 1.0687057346382] , [ 1280548800000 , 1.2539400544134] , [ 1283227200000 , 1.1862969445955] , [ 1285819200000 , 0] , [ 1288497600000 , 0] , [ 1291093200000 , 0] , [ 1293771600000 , 0] , [ 1296450000000 , 1.941972859484] , [ 1298869200000 , 2.1142247697552] , [ 1301544000000 , 2.3788590206824] , [ 1304136000000 , 2.5337302877545] , [ 1306814400000 , 2.3163370395199] , [ 1309406400000 , 2.0645451843195] , [ 1312084800000 , 2.1004446672411] , [ 1314763200000 , 3.6301875804303] , [ 1317355200000 , 2.454204664652] , [ 1320033600000 , 2.196082370894] , [ 1322629200000 , 2.3358418255202] , [ 1325307600000 , 0] , [ 1327986000000 , 0] , [ 1330491600000 , 0] , [ 1333166400000 , 0.39001201038526] , [ 1335758400000 , 0.30945472725559] , [ 1338436800000 , 0.31062439305591]]
          } ,
          {
            'key' : 'Financials' ,
            'values' : [ [ 1138683600000 , 13.356778764352] , [ 1141102800000 , 13.611196863271] , [ 1143781200000 , 6.895903006119] , [ 1146369600000 , 6.9939633271352] , [ 1149048000000 , 6.7241510257675] , [ 1151640000000 , 5.5611293669516] , [ 1154318400000 , 5.6086488714041] , [ 1156996800000 , 5.4962849907033] , [ 1159588800000 , 6.9193153169279] , [ 1162270800000 , 7.0016334389777] , [ 1164862800000 , 6.7865422443273] , [ 1167541200000 , 9.0006454225383] , [ 1170219600000 , 9.2233916171431] , [ 1172638800000 , 8.8929316009479] , [ 1175313600000 , 10.345937520404] , [ 1177905600000 , 10.075914677026] , [ 1180584000000 , 10.089006188111] , [ 1183176000000 , 10.598330295008] , [ 1185854400000 , 9.968954653301] , [ 1188532800000 , 9.7740580198146] , [ 1191124800000 , 10.558483060626] , [ 1193803200000 , 9.9314651823603] , [ 1196398800000 , 9.3997715873769] , [ 1199077200000 , 8.4086493387262] , [ 1201755600000 , 8.9698309085926] , [ 1204261200000 , 8.2778357995396] , [ 1206936000000 , 8.8585045600123] , [ 1209528000000 , 8.7013756413322] , [ 1212206400000 , 7.7933605469443] , [ 1214798400000 , 7.0236183483064] , [ 1217476800000 , 6.9873088186829] , [ 1220155200000 , 6.8031713070097] , [ 1222747200000 , 6.6869531315723] , [ 1225425600000 , 6.138256993963] , [ 1228021200000 , 5.6434994016354] , [ 1230699600000 , 5.495220262512] , [ 1233378000000 , 4.6885326869846] , [ 1235797200000 , 4.4524349883438] , [ 1238472000000 , 5.6766520778185] , [ 1241064000000 , 5.7675774480752] , [ 1243742400000 , 5.7882863168337] , [ 1246334400000 , 7.2666010034924] , [ 1249012800000 , 7.519182132226] , [ 1251691200000 , 7.849651451445] , [ 1254283200000 , 10.383992037985] , [ 1256961600000 , 9.0653691861818] , [ 1259557200000 , 9.6705248324159] , [ 1262235600000 , 10.856380561349] , [ 1264914000000 , 11.27452370892] , [ 1267333200000 , 11.754156529088] , [ 1270008000000 , 8.2870811422456] , [ 1272600000000 , 8.0210264360699] , [ 1275278400000 , 7.5375074474865] , [ 1277870400000 , 8.3419527338039] , [ 1280548800000 , 9.4197471818443] , [ 1283227200000 , 8.7321733185797] , [ 1285819200000 , 9.6627062648126] , [ 1288497600000 , 10.187962234549] , [ 1291093200000 , 9.8144201733476] , [ 1293771600000 , 10.275723361713] , [ 1296450000000 , 16.796066079353] , [ 1298869200000 , 17.543254984075] , [ 1301544000000 , 16.673660675084] , [ 1304136000000 , 17.963944353609] , [ 1306814400000 , 16.637740867211] , [ 1309406400000 , 15.84857094609] , [ 1312084800000 , 14.767303362182] , [ 1314763200000 , 24.778452182432] , [ 1317355200000 , 18.370353229999] , [ 1320033600000 , 15.2531374291] , [ 1322629200000 , 14.989600840649] , [ 1325307600000 , 16.052539160125] , [ 1327986000000 , 16.424390322793] , [ 1330491600000 , 17.884020741105] , [ 1333166400000 , 7.1424929577921] , [ 1335758400000 , 7.8076213051482] , [ 1338436800000 , 7.2462684949232]]
          } ,
          {
            'key' : 'Health Care' ,
            'values' : [ [ 1138683600000 , 14.212410956029] , [ 1141102800000 , 13.973193618249] , [ 1143781200000 , 15.218233920665] , [ 1146369600000 , 14.38210972745] , [ 1149048000000 , 13.894310878491] , [ 1151640000000 , 15.593086090032] , [ 1154318400000 , 16.244839695188] , [ 1156996800000 , 16.017088850646] , [ 1159588800000 , 14.183951830055] , [ 1162270800000 , 14.148523245697] , [ 1164862800000 , 13.424326059972] , [ 1167541200000 , 12.974450435753] , [ 1170219600000 , 13.23247041802] , [ 1172638800000 , 13.318762655574] , [ 1175313600000 , 15.961407746104] , [ 1177905600000 , 16.287714639805] , [ 1180584000000 , 16.246590583889] , [ 1183176000000 , 17.564505594809] , [ 1185854400000 , 17.872725373165] , [ 1188532800000 , 18.018998508757] , [ 1191124800000 , 15.584518016603] , [ 1193803200000 , 15.480850647181] , [ 1196398800000 , 15.699120036984] , [ 1199077200000 , 19.184281817226] , [ 1201755600000 , 19.691226605207] , [ 1204261200000 , 18.982314051295] , [ 1206936000000 , 18.707820309008] , [ 1209528000000 , 17.459630929761] , [ 1212206400000 , 16.500616076782] , [ 1214798400000 , 18.086324003979] , [ 1217476800000 , 18.929464156258] , [ 1220155200000 , 18.233728682084] , [ 1222747200000 , 16.315776297325] , [ 1225425600000 , 14.63289219025] , [ 1228021200000 , 14.667835024478] , [ 1230699600000 , 13.946993947308] , [ 1233378000000 , 14.394304684397] , [ 1235797200000 , 13.724462792967] , [ 1238472000000 , 10.930879035806] , [ 1241064000000 , 9.8339915513708] , [ 1243742400000 , 10.053858541872] , [ 1246334400000 , 11.786998438287] , [ 1249012800000 , 11.780994901769] , [ 1251691200000 , 11.305889670276] , [ 1254283200000 , 10.918452290083] , [ 1256961600000 , 9.6811395055706] , [ 1259557200000 , 10.971529744038] , [ 1262235600000 , 13.330210480209] , [ 1264914000000 , 14.592637568961] , [ 1267333200000 , 14.605329141157] , [ 1270008000000 , 13.936853794037] , [ 1272600000000 , 12.189480759072] , [ 1275278400000 , 11.676151385046] , [ 1277870400000 , 13.058852800017] , [ 1280548800000 , 13.62891543203] , [ 1283227200000 , 13.811107569918] , [ 1285819200000 , 13.786494560787] , [ 1288497600000 , 14.04516285753] , [ 1291093200000 , 13.697412447288] , [ 1293771600000 , 13.677681376221] , [ 1296450000000 , 19.961511864531] , [ 1298869200000 , 21.049198298158] , [ 1301544000000 , 22.687631094008] , [ 1304136000000 , 25.469010617433] , [ 1306814400000 , 24.883799437121] , [ 1309406400000 , 24.203843814248] , [ 1312084800000 , 22.138760964038] , [ 1314763200000 , 16.034636966228] , [ 1317355200000 , 15.394958944556] , [ 1320033600000 , 12.625642461969] , [ 1322629200000 , 12.973735699739] , [ 1325307600000 , 15.786018336149] , [ 1327986000000 , 15.227368020134] , [ 1330491600000 , 15.899752650734] , [ 1333166400000 , 18.994731295388] , [ 1335758400000 , 18.450055817702] , [ 1338436800000 , 17.863719889669]]
          } ,
          {
            'key' : 'Industrials' ,
            'values' : [ [ 1138683600000 , 7.1590087090398] , [ 1141102800000 , 7.1297210970108] , [ 1143781200000 , 5.5774588290586] , [ 1146369600000 , 5.4977254491156] , [ 1149048000000 , 5.5138153113634] , [ 1151640000000 , 4.3198084032122] , [ 1154318400000 , 3.9179295839125] , [ 1156996800000 , 3.8110093051479] , [ 1159588800000 , 5.5629020916939] , [ 1162270800000 , 5.7241673711336] , [ 1164862800000 , 5.4715049695004] , [ 1167541200000 , 4.9193763571618] , [ 1170219600000 , 5.136053947247] , [ 1172638800000 , 5.1327258759766] , [ 1175313600000 , 5.1888943925082] , [ 1177905600000 , 5.5191481293345] , [ 1180584000000 , 5.6093625614921] , [ 1183176000000 , 4.2706312987397] , [ 1185854400000 , 4.4453235132117] , [ 1188532800000 , 4.6228003109761] , [ 1191124800000 , 5.0645764756954] , [ 1193803200000 , 5.0723447230959] , [ 1196398800000 , 5.1457765818846] , [ 1199077200000 , 5.4067851597282] , [ 1201755600000 , 5.472241916816] , [ 1204261200000 , 5.3742740389688] , [ 1206936000000 , 6.251751933664] , [ 1209528000000 , 6.1406852153472] , [ 1212206400000 , 5.8164385627465] , [ 1214798400000 , 5.4255846656171] , [ 1217476800000 , 5.3738499417204] , [ 1220155200000 , 5.1815627753979] , [ 1222747200000 , 5.0305983235349] , [ 1225425600000 , 4.6823058607165] , [ 1228021200000 , 4.5941481589093] , [ 1230699600000 , 5.4669598474575] , [ 1233378000000 , 5.1249037357] , [ 1235797200000 , 4.3504421250742] , [ 1238472000000 , 4.6260881026002] , [ 1241064000000 , 5.0140402458946] , [ 1243742400000 , 4.7458462454774] , [ 1246334400000 , 6.0437019654564] , [ 1249012800000 , 6.4595216249754] , [ 1251691200000 , 6.6420468254155] , [ 1254283200000 , 5.8927271960913] , [ 1256961600000 , 5.4712108838003] , [ 1259557200000 , 6.1220254207747] , [ 1262235600000 , 5.5385935169255] , [ 1264914000000 , 5.7383377612639] , [ 1267333200000 , 6.1715976730415] , [ 1270008000000 , 4.0102262681174] , [ 1272600000000 , 3.769389679692] , [ 1275278400000 , 3.5301571031152] , [ 1277870400000 , 2.7660252652526] , [ 1280548800000 , 3.1409983385775] , [ 1283227200000 , 3.0528024863055] , [ 1285819200000 , 4.3126123157971] , [ 1288497600000 , 4.594654041683] , [ 1291093200000 , 4.5424126126793] , [ 1293771600000 , 4.7790043987302] , [ 1296450000000 , 7.4969154058289] , [ 1298869200000 , 7.9424751557821] , [ 1301544000000 , 7.1560736250547] , [ 1304136000000 , 7.9478117337855] , [ 1306814400000 , 7.4109214848895] , [ 1309406400000 , 7.5966457641101] , [ 1312084800000 , 7.165754444071] , [ 1314763200000 , 5.4816702524302] , [ 1317355200000 , 4.9893656089584] , [ 1320033600000 , 4.498385105327] , [ 1322629200000 , 4.6776090358151] , [ 1325307600000 , 8.1350814368063] , [ 1327986000000 , 8.0732769990652] , [ 1330491600000 , 8.5602340387277] , [ 1333166400000 , 5.1293714074325] , [ 1335758400000 , 5.2586794619016] , [ 1338436800000 , 5.1100853569977]]
          } ,
          {
            'key' : 'Information Technology' ,
            'values' : [ [ 1138683600000 , 13.242301508051] , [ 1141102800000 , 12.863536342042] , [ 1143781200000 , 21.034044171629] , [ 1146369600000 , 21.419084618803] , [ 1149048000000 , 21.142678863691] , [ 1151640000000 , 26.568489677529] , [ 1154318400000 , 24.839144939905] , [ 1156996800000 , 25.456187462167] , [ 1159588800000 , 26.350164502826] , [ 1162270800000 , 26.47833320519] , [ 1164862800000 , 26.425979547847] , [ 1167541200000 , 28.191461582256] , [ 1170219600000 , 28.930307448808] , [ 1172638800000 , 29.521413891117] , [ 1175313600000 , 28.188285966466] , [ 1177905600000 , 27.704619625832] , [ 1180584000000 , 27.490862424829] , [ 1183176000000 , 28.770679721286] , [ 1185854400000 , 29.060480671449] , [ 1188532800000 , 28.240998844973] , [ 1191124800000 , 33.004893194127] , [ 1193803200000 , 34.075180359928] , [ 1196398800000 , 32.548560664833] , [ 1199077200000 , 30.629727432728] , [ 1201755600000 , 28.642858788159] , [ 1204261200000 , 27.973575227842] , [ 1206936000000 , 27.393351882726] , [ 1209528000000 , 28.476095288523] , [ 1212206400000 , 29.29667866426] , [ 1214798400000 , 29.222333802896] , [ 1217476800000 , 28.092966093843] , [ 1220155200000 , 28.107159262922] , [ 1222747200000 , 25.482974832098] , [ 1225425600000 , 21.208115993834] , [ 1228021200000 , 20.295043095268] , [ 1230699600000 , 15.925754618401] , [ 1233378000000 , 17.162864628346] , [ 1235797200000 , 17.084345773174] , [ 1238472000000 , 22.246007102281] , [ 1241064000000 , 24.530543998509] , [ 1243742400000 , 25.084184918242] , [ 1246334400000 , 16.606166527358] , [ 1249012800000 , 17.239620011628] , [ 1251691200000 , 17.336739127379] , [ 1254283200000 , 25.478492475753] , [ 1256961600000 , 23.017152085245] , [ 1259557200000 , 25.617745423683] , [ 1262235600000 , 24.061133998642] , [ 1264914000000 , 23.223933318644] , [ 1267333200000 , 24.425887263937] , [ 1270008000000 , 35.501471156693] , [ 1272600000000 , 33.775013878676] , [ 1275278400000 , 30.417993630285] , [ 1277870400000 , 30.023598978467] , [ 1280548800000 , 33.327519522436] , [ 1283227200000 , 31.963388450371] , [ 1285819200000 , 30.498967232092] , [ 1288497600000 , 32.403696817912] , [ 1291093200000 , 31.47736071922] , [ 1293771600000 , 31.53259666241] , [ 1296450000000 , 41.760282761548] , [ 1298869200000 , 45.605771243237] , [ 1301544000000 , 39.986557966215] , [ 1304136000000 , 43.846330510051] , [ 1306814400000 , 39.857316881857] , [ 1309406400000 , 37.675127768208] , [ 1312084800000 , 35.775077970313] , [ 1314763200000 , 48.631009702577] , [ 1317355200000 , 42.830831754505] , [ 1320033600000 , 35.611502589362] , [ 1322629200000 , 35.320136981738] , [ 1325307600000 , 31.564136901516] , [ 1327986000000 , 32.074407502433] , [ 1330491600000 , 35.053013769976] , [ 1333166400000 , 26.434568573937] , [ 1335758400000 , 25.305617871002] , [ 1338436800000 , 24.520919418236]]
          } ,
          {
            'key' : 'Materials' ,
            'values' : [ [ 1138683600000 , 5.5806167415681] , [ 1141102800000 , 5.4539047069985] , [ 1143781200000 , 7.6728842432362] , [ 1146369600000 , 7.719946716654] , [ 1149048000000 , 8.0144619912942] , [ 1151640000000 , 7.942223133434] , [ 1154318400000 , 8.3998279827444] , [ 1156996800000 , 8.532324572605] , [ 1159588800000 , 4.7324285199763] , [ 1162270800000 , 4.7402397487697] , [ 1164862800000 , 4.9042069355168] , [ 1167541200000 , 5.9583963430882] , [ 1170219600000 , 6.3693899239171] , [ 1172638800000 , 6.261153903813] , [ 1175313600000 , 5.3443942184584] , [ 1177905600000 , 5.4932111235361] , [ 1180584000000 , 5.5747393101109] , [ 1183176000000 , 5.3833633060013] , [ 1185854400000 , 5.5125898831832] , [ 1188532800000 , 5.8116112661327] , [ 1191124800000 , 4.3962296939996] , [ 1193803200000 , 4.6967663605521] , [ 1196398800000 , 4.7963004350914] , [ 1199077200000 , 4.1817985183351] , [ 1201755600000 , 4.3797643870182] , [ 1204261200000 , 4.6966642197965] , [ 1206936000000 , 4.3609995132565] , [ 1209528000000 , 4.4736290996496] , [ 1212206400000 , 4.3749762738128] , [ 1214798400000 , 3.3274661194507] , [ 1217476800000 , 3.0316184691337] , [ 1220155200000 , 2.5718140204728] , [ 1222747200000 , 2.7034994044603] , [ 1225425600000 , 2.2033786591364] , [ 1228021200000 , 1.9850621240805] , [ 1230699600000 , 0] , [ 1233378000000 , 0] , [ 1235797200000 , 0] , [ 1238472000000 , 0] , [ 1241064000000 , 0] , [ 1243742400000 , 0] , [ 1246334400000 , 0] , [ 1249012800000 , 0] , [ 1251691200000 , 0] , [ 1254283200000 , 0.44495950017788] , [ 1256961600000 , 0.33945469262483] , [ 1259557200000 , 0.38348269455195] , [ 1262235600000 , 0] , [ 1264914000000 , 0] , [ 1267333200000 , 0] , [ 1270008000000 , 0] , [ 1272600000000 , 0] , [ 1275278400000 , 0] , [ 1277870400000 , 0] , [ 1280548800000 , 0] , [ 1283227200000 , 0] , [ 1285819200000 , 0] , [ 1288497600000 , 0] , [ 1291093200000 , 0] , [ 1293771600000 , 0] , [ 1296450000000 , 0.52216435716176] , [ 1298869200000 , 0.59275786698454] , [ 1301544000000 , 0] , [ 1304136000000 , 0] , [ 1306814400000 , 0] , [ 1309406400000 , 0] , [ 1312084800000 , 0] , [ 1314763200000 , 0] , [ 1317355200000 , 0] , [ 1320033600000 , 0] , [ 1322629200000 , 0] , [ 1325307600000 , 0] , [ 1327986000000 , 0] , [ 1330491600000 , 0] , [ 1333166400000 , 0] , [ 1335758400000 , 0] , [ 1338436800000 , 0]]
          } ,
          {
            'key' : 'Telecommunication Services' ,
            'values' : [ [ 1138683600000 , 3.7056975170243] , [ 1141102800000 , 3.7561118692318] , [ 1143781200000 , 2.861913700854] , [ 1146369600000 , 2.9933744103381] , [ 1149048000000 , 2.7127537218463] , [ 1151640000000 , 3.1195497076283] , [ 1154318400000 , 3.4066964004508] , [ 1156996800000 , 3.3754571113569] , [ 1159588800000 , 2.2965579982924] , [ 1162270800000 , 2.4486818633018] , [ 1164862800000 , 2.4002308848517] , [ 1167541200000 , 1.9649579750349] , [ 1170219600000 , 1.9385263638056] , [ 1172638800000 , 1.9128975336387] , [ 1175313600000 , 2.3412869836298] , [ 1177905600000 , 2.4337870351445] , [ 1180584000000 , 2.62179703171] , [ 1183176000000 , 3.2642864957929] , [ 1185854400000 , 3.3200396223709] , [ 1188532800000 , 3.3934212707572] , [ 1191124800000 , 4.2822327088179] , [ 1193803200000 , 4.1474964228541] , [ 1196398800000 , 4.1477082879801] , [ 1199077200000 , 5.2947122916128] , [ 1201755600000 , 5.2919843508028] , [ 1204261200000 , 5.1989783050309] , [ 1206936000000 , 3.5603057673513] , [ 1209528000000 , 3.3009087690692] , [ 1212206400000 , 3.1784852603792] , [ 1214798400000 , 4.5889503538868] , [ 1217476800000 , 4.401779617494] , [ 1220155200000 , 4.2208301828278] , [ 1222747200000 , 3.89396671475] , [ 1225425600000 , 3.0423832241354] , [ 1228021200000 , 3.135520611578] , [ 1230699600000 , 1.9631418164089] , [ 1233378000000 , 1.8963543874958] , [ 1235797200000 , 1.8266636017025] , [ 1238472000000 , 0.93136635895188] , [ 1241064000000 , 0.92737801918888] , [ 1243742400000 , 0.97591889805002] , [ 1246334400000 , 2.6841193805515] , [ 1249012800000 , 2.5664341140531] , [ 1251691200000 , 2.3887523699873] , [ 1254283200000 , 1.1737801663681] , [ 1256961600000 , 1.0953582317281] , [ 1259557200000 , 1.2495674976653] , [ 1262235600000 , 0.36607452464754] , [ 1264914000000 , 0.3548719047291] , [ 1267333200000 , 0.36769242398939] , [ 1270008000000 , 0] , [ 1272600000000 , 0] , [ 1275278400000 , 0] , [ 1277870400000 , 0] , [ 1280548800000 , 0] , [ 1283227200000 , 0] , [ 1285819200000 , 0.85450741275337] , [ 1288497600000 , 0.91360317921637] , [ 1291093200000 , 0.89647678692269] , [ 1293771600000 , 0.87800687192639] , [ 1296450000000 , 0] , [ 1298869200000 , 0] , [ 1301544000000 , 0.43668720882994] , [ 1304136000000 , 0.4756523602692] , [ 1306814400000 , 0.46947368328469] , [ 1309406400000 , 0.45138896152316] , [ 1312084800000 , 0.43828726648117] , [ 1314763200000 , 2.0820861395316] , [ 1317355200000 , 0.9364411075395] , [ 1320033600000 , 0.60583907839773] , [ 1322629200000 , 0.61096950747437] , [ 1325307600000 , 0] , [ 1327986000000 , 0] , [ 1330491600000 , 0] , [ 1333166400000 , 0] , [ 1335758400000 , 0] , [ 1338436800000 , 0]]
          } ,
          {
            'key' : 'Utilities' ,
            'values' : [ [ 1138683600000 , 0] , [ 1141102800000 , 0] , [ 1143781200000 , 0] , [ 1146369600000 , 0] , [ 1149048000000 , 0] , [ 1151640000000 , 0] , [ 1154318400000 , 0] , [ 1156996800000 , 0] , [ 1159588800000 , 0] , [ 1162270800000 , 0] , [ 1164862800000 , 0] , [ 1167541200000 , 0] , [ 1170219600000 , 0] , [ 1172638800000 , 0] , [ 1175313600000 , 0] , [ 1177905600000 , 0] , [ 1180584000000 , 0] , [ 1183176000000 , 0] , [ 1185854400000 , 0] , [ 1188532800000 , 0] , [ 1191124800000 , 0] , [ 1193803200000 , 0] , [ 1196398800000 , 0] , [ 1199077200000 , 0] , [ 1201755600000 , 0] , [ 1204261200000 , 0] , [ 1206936000000 , 0] , [ 1209528000000 , 0] , [ 1212206400000 , 0] , [ 1214798400000 , 0] , [ 1217476800000 , 0] , [ 1220155200000 , 0] , [ 1222747200000 , 0] , [ 1225425600000 , 0] , [ 1228021200000 , 0] , [ 1230699600000 , 0] , [ 1233378000000 , 0] , [ 1235797200000 , 0] , [ 1238472000000 , 0] , [ 1241064000000 , 0] , [ 1243742400000 , 0] , [ 1246334400000 , 0] , [ 1249012800000 , 0] , [ 1251691200000 , 0] , [ 1254283200000 , 0] , [ 1256961600000 , 0] , [ 1259557200000 , 0] , [ 1262235600000 , 0] , [ 1264914000000 , 0] , [ 1267333200000 , 0] , [ 1270008000000 , 0] , [ 1272600000000 , 0] , [ 1275278400000 , 0] , [ 1277870400000 , 0] , [ 1280548800000 , 0] , [ 1283227200000 , 0] , [ 1285819200000 , 0] , [ 1288497600000 , 0] , [ 1291093200000 , 0] , [ 1293771600000 , 0] , [ 1296450000000 , 0] , [ 1298869200000 , 0] , [ 1301544000000 , 0] , [ 1304136000000 , 0] , [ 1306814400000 , 0] , [ 1309406400000 , 0] , [ 1312084800000 , 0] , [ 1314763200000 , 0] , [ 1317355200000 , 0] , [ 1320033600000 , 0] , [ 1322629200000 , 0] , [ 1325307600000 , 0] , [ 1327986000000 , 0] , [ 1330491600000 , 0] , [ 1333166400000 , 0] , [ 1335758400000 , 0] , [ 1338436800000 , 0]]
          }
        ];
        var colors = d3.scale.category20();
        var chart;
        nv.addGraph(function() {
          chart = nv.models.stackedAreaChart()
            .useInteractiveGuideline(true)
            .x(function(d) { return d[0] })
            .y(function(d) { return d[1] })
            .controlLabels({stacked: 'Stacked'})
            .duration(300);

          chart.xAxis.tickFormat(function(d) { return d3.time.format('%x')(new Date(d)) });
          chart.yAxis.tickFormat(d3.format(',.4f'));
          chart.showControls(false);
          chart.legend.updateState(false);

          d3.select(rawSvg)
            .style({ 'width': 350, 'height': 350 })
            .datum(histcatexplong)
            .transition().duration(1000)
            .call(chart)
            //.each('start', function() {
            //  setTimeout(function() {
            //    d3.selectAll('#chart1 *').each(function() {
            //      if(this.__transition__)
            //        this.__transition__.duration = 1;
            //    })
            //  }, 0)
            //})
             ;
          //nv.utils.windowResize(chart.update);
          return chart;
        });
      }
    }
  })

.directive('piechart', function() {
    return {
      restrict: 'A',
      template: '<svg></svg>',
      link: function (scope, elem, attr) {

        var nv_data=
        [{
          'key': '1/4 Mile Radius',
          //'values': [{'label': 'Bubble Sort', 'value': 0}, {'label': 'Merge Sort', 'value': 0.2}, {'label': 'Quick Sort', 'value': 0.1}, {'label': 'Selection Sort', 'value': 0.3}, {'label': 'Shell Sort', 'value': 0.1}]
          'values': []
        }, {
          'key': '1/2 Mile Radius',
          'values': [{'label': 'Bubble Sort', 'value': 0.1}, {'label': 'Merge Sort', 'value': 0.40}, {'label': 'Quick Sort', 'value': 0.40}, {'label': 'Selection Sort', 'value': 0.05}, {'label': 'Shell Sort', 'value': 0.05}]
        }, {
          'key': '1 Mile Radius',
          'values': [{'label': 'Bubble Sort', 'value': 0.3}, {'label': 'Merge Sort', 'value': 0.2}, {'label': 'Quick Sort', 'value': 0.1}, {'label': 'Selection Sort', 'value': 0.3}, {'label': 'Shell Sort', 'value': 0.1}]
        }, {
          'key': '3 Mile Radius',
          'values': [{'label': 'Bubble Sort', 'value': 0.1}, {'label': 'Merge Sort', 'value': 0.40}, {'label': 'Quick Sort', 'value': 0.40}, {'label': 'Selection Sort', 'value': 0.05}, {'label': 'Shell Sort', 'value': 0.05}]
        }];




        function piechart(data, rawSvg){

          var currencyFormat = d3.format("$,");
          function drawPanels(rawSvg){

            var panel = d3.select(rawSvg).append('g').attr("class", "panel");
            panel.append("text").attr("class", "panelText")
              .attr("x", 20)
              .attr("y", 220)
              //.attr("font-family", "Gotham A")
              .attr("font-size", 30)
              .attr("fill", "steelblue")
              .text(currencyFormat(700564));

            panel.append("text").attr("class", "panelText")
              .attr("x", 5)
              .attr("y", 235)
              //.attr("font-family", "Gotham A")
              .attr("font-size", 15)
              .attr("fill", "steelblue")
              .text("2015 Median Home Value");

            panel.append("text").attr("class", "panelText")
              .attr("x", 20)
              .attr("y", 280)
              //.attr("font-family", "Gotham A")
              .attr("font-size", 30)
              .attr("fill", "steelblue")
              .text(currencyFormat(700564));

            panel.append("text").attr("class", "panelText")
              .attr("x", 5)
              .attr("y", 295)
              //.attr("font-family", "Gotham A")
              .attr("font-size", 15)
              .attr("fill", "steelblue")
              .text("2015 Median Home Value");


            panel.append("text").attr("class", "panelText")
              .attr("x", 195)
              .attr("y", 220)
              //.attr("font-family", "Gotham A")
              .attr("font-size", 30)
              .attr("fill", "steelblue")
              .text(currencyFormat(700564));

            panel.append("text").attr("class", "panelText")
              .attr("x", 180)
              .attr("y", 235)
              //.attr("font-family", "Gotham A")
              .attr("font-size", 15)
              .attr("fill", "steelblue")
              .text("2015 Median Home Value");

          }

          function tooltip (key){
            var tooltipString = '<table >'+
                //'<tr>'+'<th colspan="3">'+title+'</th>'+'</tr>'+
              '<tr>'+'<td>'+ key.data.label +'</td>'+
              '<td class="legend-color-guide"><div style="background-color:'+key.color+';"></div></td>' + '</tr>'+
              //'<tr>'+'<td>'+ "Stuff1" + '</td> <td>' +  + '</td>'+'</tr>' +
              '<tr>'+'<td>'+ "Percentage" + '</td> <td>' + key.data.value + '</td>'+'</tr>'+'</table>';
            // + '<tr>'+'<td colspan="3"> Households 1,2345</td>'+'</tr>'+'</table>';
            return tooltipString
          }

          var fullData = data;

          var chart;

          var dataIndex = 0;

          var dataLegend = nv.models.legend()

            .key(function(d) { return d.key; })
            .updateState(true)
            .radioButtonMode(true)
            //.color(['#444', '#444', '#444'])
            .width(300);



          var wrap = d3.select(rawSvg).data([fullData]).transition().duration(500).call(dataLegend);
          var series = wrap.selectAll('g.nv-series').style('cursor','hand');
          var circles = wrap.selectAll('g.nv-series circle');


          d3.select(circles[0][0]).style('fill-opacity','1');
          d3.select(circles[0][1]).style('fill-opacity','0');
          d3.select(circles[0][2]).style('fill-opacity','0');
          d3.select(circles[0][3]).style('fill-opacity','0');

          dataLegend.dispatch.on('stateChange', function (e) {changeDataSeries(e)});



          console.log(series);

          nv.addGraph(function() {

            chart = nv.models.pieChart()
              .x(function(d) { return d.label })
              .y(function(d) { return d.value })
              .donut(true)
              .padAngle(.08)
              .cornerRadius(5)
              .margin({top: -20})
              .id('donut1') // allow custom CSS for this one svg
              .legendPosition('right')
              .labelType('percent')
              .width(350)
              .height(350)
              //.noData("No Data Available.");
              .noData("proop");
            //.showLegend(false);
            //chart.title('Total Population')
            //  .titleOffset(100);

            //chart.legend.vers('furious');
            chart.legend.margin({left:-30, top: 45});
            chart.legend.updateState(false);
            //chart.legend.radioButtonMode(true);
            chart.tooltip.contentGenerator(function(key){
              console.log(key);
              return tooltip(key);
            });

            //chart.labelTextColor('#fff');
            //chart.pie.donutLabelsOutside(true).donut(true);

            var nvd3SvgLegend = d3.select(rawSvg).select('nvd3');
            console.log(nvd3SvgLegend);

            d3.select(rawSvg)
              .style({ 'width': 300, 'height': 320 })
              .datum(fullData[0].values)
              //.datum(data)
              .transition().duration(1200)
              .call(chart);

            d3.select(rawSvg).selectAll("g.nv-pieWrap").attr("transform", "translate(0, -15)");



var x = true;
            if(x){
              drawPanels(rawSvg);
            }

            return chart;
          });

          function redraw(){

            d3.select(rawSvg).selectAll("g.panel").remove();
            d3.select(rawSvg).selectAll("g.nv-pieWrap").attr("transform", "translate(0, -15)");
            d3.select(rawSvg)
              .style({ 'width': 300, 'height': 320 })
              .datum(data)
              //.datum(data)
              .transition().duration(1200)
              .call(chart);

            drawPanels(rawSvg);

          }


          function changeDataSeries(e) {
            var series = e.disabled;
            console.log(series);
            //var dataIndex = 0;
            for(var i = 0; i < series.length; i++){
              if(series[i] === true) {
                d3.select(circles[0][i]).style('fill-opacity','0');
              }
              else {
                dataIndex = i;
                d3.select(circles[0][i]).style('fill-opacity','1');
              }
            }

            console.log(dataIndex);

            data = fullData[dataIndex].values;

            console.log(data);

            redraw();
          }

          }

        var rawSvg = elem.find('svg')[0];
        piechart(nv_data, rawSvg);


      }
    }
  })
  .directive('verticalBar', function() {
    return {
      restrict: 'A',
      template: '<svg></svg>',
      link: function (scope, elem, attr) {

        //var padding = 0.3;
        //var margin = {top: 40, right: 55, bottom: 40, left: 55},
        //  width = 350 - margin.left - margin.right,
        //  height = 350 - margin.top - margin.bottom;


        var xAxisLabel = 'Year';
        var yAxisLabel = 'Population';
        var data = [
          {'year': '2000', '3 Mile': 192900, '1 Mile': 45448, '1/2 Mile': 12023, '1/4 Mile': 3239},
          {'year': '2010', '3 Mile': 292794, '1 Mile': 68983, '1/2 Mile': 18250, '1/4 Mile': 4916},
          {'year': '2015', '3 Mile': 344464, '1 Mile': 81157, '1/2 Mile': 21470, '1/4 Mile': 5784},
          {'year': '2020', '3 Mile': 399328, '1 Mile': 94083, '1/2 Mile': 24890, '1/4 Mile': 6705}
        ];
        //var nv_data=
        //  [
        //    {'key':'3 Mile', 'values': [
        //      { 'x': '2000', 'y': 192900, 'y0': 0},
        //      { 'x': '2010', 'y': 292794, 'y0': 0},
        //      { 'x': '2015', 'y': 344464, 'y0': 0},
        //      { 'x': '2020', 'y': 399328, 'y0': 0}
        //    ]},
        //    {'key':'1 Mile', 'values': [
        //      { 'x': '2000', 'y': 45448, 'y0': 0},
        //      { 'x': '2010', 'y': 68983, 'y0': 0},
        //      { 'x': '2015', 'y': 81157, 'y0': 0},
        //      { 'x': '2020', 'y': 94083, 'y0': 0}
        //    ]},
        //    {'key':'1/2 Mile', 'values': [
        //      { 'x': '2000', 'y': 12023, 'y0': 0},
        //      { 'x': '2010', 'y': 18259, 'y0': 0},
        //      { 'x': '2015', 'y': 21479, 'y0': 0},
        //      { 'x': '2020', 'y': 24890, 'y0': 0}
        //    ]},
        //    {'key':'1/4 Mile', 'values': [
        //      { 'x': '2000', 'y': 3239, 'y0': 0},
        //      { 'x': '2010', 'y': 4916, 'y0': 0},
        //      { 'x': '2015', 'y': 5784, 'y0': 0},
        //      { 'x': '2020', 'y': 6705, 'y0': 0}
        //    ]}
        //  ];

        var nv_data=
          [
            {'key':'3 Mile', 'values': [
              { 'x': '2020', 'y': 399328, 'y0': 0},
              { 'x': '2015', 'y': 344464, 'y0': 0},
              { 'x': '2010', 'y': 292794, 'y0': 0},
              { 'x': '2000', 'y': 192900, 'y0': 0}
            ]},
            {'key':'1 Mile', 'values': [
              { 'x': '2020', 'y': 94083, 'y0': 0},
              { 'x': '2015', 'y': 81157, 'y0': 0},
              { 'x': '2010', 'y': 68983, 'y0': 0},
              { 'x': '2000', 'y': 45448, 'y0': 0}
            ]},
            {'key':'1/2 Mile', 'values': [
              { 'x': '2020', 'y': 24890, 'y0': 0},
              { 'x': '2015', 'y': 21479, 'y0': 0},
              { 'x': '2010', 'y': 18259, 'y0': 0},
              { 'x': '2000', 'y': 12023, 'y0': 0}
            ]},
            {'key':'1/4 Mile', 'values': [
              { 'x': '2020', 'y': 6705, 'y0': 0},
              { 'x': '2015', 'y': 5784, 'y0': 0},
              { 'x': '2010', 'y': 4916, 'y0': 0},
              { 'x': '2000', 'y': 3239, 'y0': 0}
            ]}
          ];

        var parse = d3.time.format('%Y').parse, format = d3.time.format('%Y');

        var labelVar = 'year',
          varNames = d3.keys(data[0]).filter(function (key) { return key !== labelVar;});

        var layers = d3.layout.stack()(varNames.map(function(key) {
          return data.map(function(d){
            return {key:key, x: format(parse(d[labelVar])), y: Math.log(d[key])};
            //return {x: d[labelVar], y: +d[name]};
          })
        }));

        var nv_log_data = [];
        for(var x = 0; x < layers.length; x++){
          var key = layers[x][0].key;
          //console.log(layers[x][0]);
          var newObj = {};
          newObj.key = key;
          newObj.values = layers[x];
          nv_log_data.push(newObj);
        }

        //console.log('nv_data');
        //console.log(nv_data);
        //
        //console.log('layers');
        //console.log(layers);

        console.log(elem);
        var rawSvg = elem.find('svg')[0];


        nv.addGraph({
          generate: function() {
            //var width = nv.utils.windowSize().width,
            //  height = nv.utils.windowSize().height;
            var width = 350, height = 350;
            var chart = nv.models.multiBarChart()
              .width(width)
              .height(height)
              .stacked(false);

            chart.xAxis.axisLabel('Year');
            chart.yAxis.axisLabel('Population');

            chart.dispatch.on('renderEnd', function(){
              console.log('Render Complete');
            });
            var svg = d3.select(rawSvg).datum(nv_data).style({width:350, height:350});
            console.log('calling chart');
            svg.transition().duration(0).call(chart);
            return chart;
          }
          //,
          //callback: function(graph) {
          //  nv.utils.windowResize(function() {
          //    var width = nv.utils.windowSize().width;
          //    var height = nv.utils.windowSize().height;
          //    graph.width(width).height(height);
          //    var rawSvg = elem.find('svg')[0];
          //    d3.select(rawSvg)
          //      .attr('width', width)
          //      .attr('height', height)
          //      .transition().duration(0)
          //      .call(graph);
          //  });
          //}
        });

      }
    }
  })

  //.directive('stackGroup',  function() {
  .directive('myStackGroup', ['d3Service', function(d3Service) {
    return {
      restrict: 'A',
      template: '<svg height=350 width=350></svg>',
      link: function (scope, elem, attr) {
        d3Service.d3().then(function (d3) {

          var rawSvg = elem.find('svg')[0];
          var padding = 0.3;
          var margin = {top: 40, right: 55, bottom: 40, left: 55},
            width = 350 - margin.left - margin.right,
            height = 350 - margin.top - margin.bottom;

          //var data = [
          //  {'year': '2000','1/4 Mile': 3239, '1/2 Mile': 12023, '1 Mile': 45448, '3 Mile': 192900},
          //  {'year': '2010', '1/4 Mile': 4916, '1/2 Mile': 18250, '1 Mile': 68983, '3 Mile': 292794},
          //  {'year': '2015', '1/4 Mile': 5784, '1/2 Mile': 21470, '1 Mile': 81157, '3 Mile': 344464 },
          //  {'year': '2020', '1/4 Mile': 6705, '1/2 Mile': 24890, '1 Mile': 94083, '3 Mile': 399328}
          //];


          var xAxisLabel = 'Year';
          var yAxisLabel = 'Population';
          var data = [
            {
              'year': '2000',
              '3 Mile': 192900,
              '1 Mile': 45448,
              '1/2 Mile': 12023,
              '1/4 Mile': 3239

            },
            {
              'year': '2010',
              '3 Mile': 292794,
              '1 Mile': 68983,
              '1/2 Mile': 18250,
              '1/4 Mile': 4916
            },
            {
              'year': '2015',
              '3 Mile': 344464,
              '1 Mile': 81157,
              '1/2 Mile': 21470,
              '1/4 Mile': 5784
            },
            {
              'year': '2020',
              '3 Mile': 399328,
              '1 Mile': 94083,
              '1/2 Mile': 24890,
              '1/4 Mile': 6705
            }
          ];

          //var parse = d3.time.format('%Y').parse, format = d3.time.format('%Y');
          //
          //var labelVar = 'year',
          //  varNames = d3.keys(data[0]).filter(function (key) { return key !== labelVar;});
          //
          //var layers = d3.layout.stack()(varNames.map(function(name) {
          //  return data.map(function(d){
          //    return {name:name, x: format(parse(d[labelVar])), y: +d[name], enabled: true};
          //    //return {x: d[labelVar], y: +d[name]};
          //  })
          //}));

          //Attempting to log it all
          var parse = d3.time.format('%Y').parse, format = d3.time.format('%Y');

          var labelVar = 'year',
            varNames = d3.keys(data[0]).filter(function (key) { return key !== labelVar;});

          var layers = d3.layout.stack()(varNames.map(function(name) {
            return data.map(function(d){
              //return {name:name, x: format(parse(d[labelVar])), y: Math.log(d[name]), enabled: true};
              return {name:name, x: format(parse(d[labelVar])), y: d[name], enabled: true};
              //return {x: d[labelVar], y: +d[name]};
            })
          }));

console.log(layers);

        var n = layers.length, // number of stacked layers
          m = layers[0].length, // number of stacks (points on x axis)
          yGroupMax = d3.max(layers, function(layer) { return d3.max(layer, function(d) { return d.y; }); }),
          yGroupMin = d3.min(layers, function(layer) { return d3.max(layer, function(d) { return d.y; }); }),
          yStackMax = d3.max(layers, function(layer) { return d3.max(layer, function(d) { return d.y0 + d.y; }); });
          yStackMin = d3.min(layers, function(layer) { return d3.max(layer, function(d) { return d.y0 + d.y; }); });

        var x = d3.scale.ordinal()
          .domain(layers[0].map(function(d) { return d.x; }))
          .rangeRoundBands([0, width], padding);

        var y = d3.scale.linear()
          .domain([0, yStackMax])
          .range([height, 0]);

        //var y = d3.scale.linear()
        //  .domain([0, yStackMax])
        //  .range([height, 0]);

          //var y = d3.scale.log()
          //  .base(Math.E)
          //  .domain([Math.exp(0), Math.exp(yStackMax)])
          //  .range([height, 0]);

        var div = d3.select('body').append('div')
          .attr('class', 'tooltip')
          .style('opacity', 0);

        var color = d3.scale.category20().domain(varNames);

        var xAxis = d3.svg.axis()
          .scale(x)
          .tickSize(0)
          .tickPadding(6)
          .orient('bottom');

        var yAxis = d3.svg.axis()
            .scale(y)
            .orient('left');

        var svg = d3.select(rawSvg)
          .attr('width', width + margin.left + margin.right)
          .attr('height', height + margin.top + margin.bottom)
          .append('g')
          .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

        var layer = svg.selectAll('.layer')
          .data(layers)
          .enter().append('g')
          .attr('class', 'layer')
          .style('fill', function(d) { return color(d[0].name); })
          .each(function(d) {this._current = d[0];});

          console.log(layer);

        //var div = d3.select('body').append('div').attr('id', 'tooltip').attr('class','hidden').style('opacity', 0);

        var rect = layer.selectAll('rect')
          .data(function(d) { return d; })
          .enter().append('rect')
          .attr('x', function(d) { return x(d.x); })
          .attr('y', height)
          .attr('width', x.rangeBand())
          .attr('height', 0)
          .on('mouseover', function(d) {
            tooltip.select('.name').html('Radius: ' +d.name);
            tooltip.select('.value').html('Value: ' +d.y);
            tooltip.select('.year').html('Year: ' +d.x);
            tooltip.style('display', 'block');
          })
          .on('mouseout', function() {
            tooltip.style('display', 'none');
          })
          .on('mousemove', function() {
            tooltip
              .style('top', (d3.event.pageY) + 'px')
              .style('left', (d3.event.pageX) + 'px');
          });


        rect.transition()
          .delay(function(d, i) { return i * 10; })
          .attr('y', function(d) { return y(d.y0 + d.y); })
          .attr('height', function(d) { return y(d.y0) - y(d.y0 + d.y); });


        //x Axis Line
        svg.append('g')
          .attr('class', 'x axis')
          .attr('transform', 'translate(0,' + height + ')')
          .call(xAxis);

        //x Axis Label
        svg.append('text')
          .attr('class', 'x label')
          .attr('text-anchor', 'end')
          .attr('x', width/2)
          .attr('y', height + 30)
          .text(xAxisLabel);

        //y Axis Line
        svg.append('g')
            .attr('class', 'y axis')
            .call(yAxis)
            .append('text');

        //y Axis Label
        svg.append('text')
          .attr('class', 'y label')
          .attr('text-anchor', 'end')
          .attr('y', 6)
          .attr('dy', '.75em')
          .attr('transform', 'rotate(-90)')
          .text(yAxisLabel);

        //Chart Title
        svg.append('text')
          .attr('class', 'title')
          .attr('x', width/2)
          .attr('y', 0 - (margin.top / 2))
          .attr('text-anchor', 'middle')
          .style('font-weight', 'bold')
          .style('font-size', '16px')
          .text('Sample Title');


        d3.selectAll('input').on('change', change);

        //var timeout = setTimeout(function() {
        //  d3.select('input[value=\'grouped\']').property('checked', true).each(change);
        //}, 2000);
        //
        function change() {
          //clearTimeout(timeout);
          if (this.value === 'grouped') transitionGrouped();
          else transitionStacked();
        }

        function transitionGrouped() {
          y.domain([0, yGroupMax]);

          rect.transition()
            .duration(500)
            .delay(function(d, i) { return i * 10; })
            .attr('x', function(d, i, j) { return x(d.x) + x.rangeBand() / n * j; })
            .attr('width', x.rangeBand() / n)
            .transition()
            .attr('y', function(d) { return y(d.y); })
            .attr('height', function(d) { return height - y(d.y); });
        }

        function transitionStacked() {
          y.domain([0, yStackMax]);

          rect.transition()
            .duration(500)
            .delay(function(d, i) { return i * 10; })
            .attr('y', function(d) { return y(d.y0 + d.y); })
            .attr('height', function(d) { return y(d.y0) - y(d.y0 + d.y); })
            .transition()
            .attr('x', function(d) { return x(d.x); })
            .attr('width', x.rangeBand());
        }

        //var tooltip = svg.append('g')
        //  .attr('class', 'tooltip')
        //  .style('display', 'none');
        //
        //tooltip.append('rect')
        //  .attr('width', 50)
        //  .attr('height', 30)
        //  .attr('fill', 'white')
        //  .attr('rx', 10)
        //  .attr('ry', 10)
        //  .style('opacity', 1)
        //  .style('stroke-width', 1)
        //  .style('stroke', 'grey');
        //
        //
        //tooltip.append('text')
        //  .attr('x', 10)
        //  .attr('dy', '1.2em')
        //  .style('text-anchor', 'center')
        //  .attr('font-size', '12px')
        //  .attr('font-weight', 'bold');

        var tooltip = d3.select('body')            // NEW
            .append('div')                             // NEW
            .attr('class', 'tooltip')
            .style('border', '1px')              // NEW
            .style('border-style', 'solid')
            .style('border-color', '#000')             // NEW
            .style('border-radius', '3px');             // NEW

          tooltip.append('div')                        // NEW
            .attr('class', 'name');                   // NEW

          tooltip.append('div')                        // NEW
            .attr('class', 'value');                   // NEW

          tooltip.append('div')                        // NEW
            .attr('class', 'year');

          var legend = svg.selectAll('.legend')
            //.data(varNames.slice())
            .data(color.domain().slice().reverse())
            .enter().append('g')
            .attr('class', 'legend')
            .attr('transform', function (d, i) {
              return 'translate(0,' + i * 20 + ')';
            });

          legend.append('rect')
            .attr('id','legend-rect')
            .attr('x', width)
            .attr('width', 10)
            .attr('height', 10)
            .style('fill', color)
            .style('stroke', color);

          legend.append('text')
            .attr('x', width + 13)
            .attr('y', 6)
            .attr('dy', '.35em')
            .style('text-anchor', 'start')
            .text(function (d) { return d; });

          var toggle = svg.append('g')
            .attr('class','legend');

          var grouped = toggle.append('rect')
            .attr('id','toggle-rect')
            .attr('x', width)
            .attr('y', height - 50)
            .attr('width', 10)
            .attr('height', 10)
            .style('fill', 'black')
            .style('stroke', 'black')
            .attr('class', 'disabled')
            .on('click', function(){
              grouped.attr('class', '');
              transitionGrouped();
              stacked.attr('class', 'disabled');
            });

          toggle.append('text')
            .attr('x', width + 13)
            .attr('y', height - 45)
            .attr('dy', '.35em')
            .style('text-anchor', 'start')
            .text('Grouped');

          var stacked = toggle.append('rect')
            .attr('id','toggle-rect')
            .attr('x', width)
            .attr('y', height - 32)
            .attr('width', 10)
            .attr('height', 10)
            .style('fill', 'black')
            .style('stroke', 'black')
            .on('click', function(){
              stacked.attr('class', '');
              transitionStacked();
              grouped.attr('class', 'disabled');
            });

          toggle.append('text')
            .attr('x', width + 13)
            .attr('y', height - 26)
            .attr('dy', '.35em')
            .style('text-anchor', 'start')
            .text('Stacked');


        })
      }
    }
  }]);

  //
  //.directive('crimea', ['d3Service', function(d3Service) {
  //  return {
  //    restrict: 'A',
  //    link: function (scope, element, attr) {
  //      d3Service.d3().then(function (d3){
  //
  //        var w = 350,
  //          h = 350,
  //          p = [20, 50, 30, 20],
  //          x = d3.scale.ordinal().rangeRoundBands([0, w - p[1] - p[3]]),
  //          y = d3.scale.linear().range([0, h - p[0] - p[2]]),
  //          z = d3.scale.ordinal().range(['#98abc5', '#8a89a6', '#7b6888', '#6b486b', '#a05d56', '#d0743c', '#ff8c00']);
  //          parse = d3.time.format('%Y').parse,
  //          format = d3.time.format('%Y');
  //
  //        var svg = d3.select('body').append('svg:svg')
  //          .attr('width', w)
  //          .attr('height', h)
  //          .append('svg:g')
  //          .attr('transform', 'translate(' + p[3] + ',' + (h - p[2]) + ')');
  //
  //        johnData = [
  //          {
  //            'year': '2020',
  //            '3 Mile': 399328,
  //            '1 Mile': 94083,
  //            '1/2 Mile': 24890,
  //            '1/4 Mile': 6705
  //          },
  //          {
  //            'year': '2015',
  //            '3 Mile': 344464,
  //            '1 Mile': 81157,
  //            '1/2 Mile': 21470,
  //            '1/4 Mile': 5784,
  //          },
  //          {
  //            'year': '2010',
  //            '3 Mile': 292794,
  //            '1 Mile': 68983,
  //            '1/2 Mile': 18250,
  //            '1/4 Mile': 4916,
  //          },
  //          {
  //            'year': '2000',
  //            '3 Mile': 192900,
  //            '1 Mile': 45448,
  //            '1/2 Mile': 12023,
  //            '1/4 Mile': 3239,
  //
  //          }
  //        ];
  //
  //        var labelVar = 'year';
  //        var varNames = d3.keys(johnData[0])
  //          .filter(function (key) { return key !== labelVar;});
  //
  //        var layers = d3.layout.stack()(varNames.map(function(name) {
  //          return johnData.map(function(d){
  //            return {x: parse(d[labelVar]), y: +d[name]};
  //          })
  //        }));
  //
  //        console.log(layers);
  //
  //
  //          // Compute the x-domain (by date) and y-domain (by top).
  //          x.domain(layers[0].map(function(d) { return d.x; }));
  //          y.domain([0, d3.max(layers[layers.length - 1], function(d) { return d.y0 + d.y; })]);
  //
  //          // Add a group for each cause.
  //          var cause = svg.selectAll('g.layer')
  //            .data(layers)
  //            .enter().append('svg:g')
  //            .attr('class', 'layer')
  //            .style('fill', function(d, i) { return z(i); })
  //            .style('stroke', function(d, i) { return d3.rgb(z(i)).darker(); });
  //
  //          // Add a rect for each date.
  //          var rect = cause.selectAll('rect')
  //            .data(Object)
  //            .enter().append('svg:rect')
  //            .attr('x', function(d) { return x(d.x); })
  //            .attr('y', function(d) { return -y(d.y0) - y(d.y); })
  //            .attr('height', function(d) { return y(d.y); })
  //            .attr('width', x.rangeBand())
  //            .on('mouseover', function() { tooltip.style('display', null); })
  //            .on('mouseout', function() { tooltip.style('display', 'none'); })
  //            .on('mousemove', function(d) {
  //              var xPosition = d3.mouse(this)[0] - 15;
  //              var yPosition = d3.mouse(this)[1] - 25;
  //              tooltip.attr('transform', 'translate(' + xPosition + ',' + yPosition + ')');
  //              tooltip.select('text').text(d.y);
  //            });
  //
  //          // Add a label per date.
  //          var label = svg.selectAll('text')
  //            .data(x.domain())
  //            .enter().append('svg:text')
  //            .attr('x', function(d) { return x(d) + x.rangeBand() / 2; })
  //            //.attr('x', function(d) { return x(d) })
  //            .attr('y', 6)
  //            .attr('text-anchor', 'middle')
  //            .attr('dy', '.71em')
  //            .text(format);
  //
  //          // Add y-axis rules.
  //          var rule = svg.selectAll('g.rule')
  //            .data(y.ticks(5))
  //            .enter().append('svg:g')
  //            .attr('class', 'rule')
  //            .attr('transform', function(d) { return 'translate(0,' + -y(d) + ')'; });
  //
  //          rule.append('svg:line')
  //            .attr('x2', w - p[1] - p[3])
  //            .style('stroke', function(d) { return d ? '#fff' : '#000'; })
  //            .style('stroke-opacity', function(d) { return d ? .7 : null; });
  //
  //          rule.append('svg:text')
  //            .attr('x', w - p[1] - p[3] + 6)
  //            .attr('dy', '.35em')
  //            .text(d3.format(',d'));
  //
  //
  //          var tooltip = svg.append('g')
  //            .attr('class', 'tooltip')
  //            .style('display', 'none');
  //
  //          tooltip.append('rect')
  //            .attr('width', 50)
  //            .attr('height', 30)
  //            .attr('fill', 'white')
  //            .style('opacity', 1)
  //            .style('border', '2px')
  //            .style('border-radius', '25px');
  //
  //          tooltip.append('text')
  //            .attr('x', 10)
  //            .attr('dy', '1.2em')
  //            .style('text-anchor', 'center')
  //            .attr('font-size', '12px')
  //            .attr('font-weight', 'bold');
  //
  //      //})
  //
  //      });
  //    }
  //  }
  //}]);
